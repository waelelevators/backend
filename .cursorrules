
1. Adopt Modular Structure with Laravel Modules

    Rule: Each feature or business logic must be encapsulated in its own module using Laravel Modules. This ensures scalability and separation of concerns.
    AI Task: Automatically generate modules for each major feature (e.g., Accounting, Inventory, HR), ensuring that each module has its own controllers, models, services, and routes.

2. Service Layer within Modules

    Rule: All business logic must be abstracted into service classes inside each module. Controllers should only handle HTTP requests and responses.
    AI Task: Ensure the generation of service classes for each module, allowing code reuse and easier maintenance.

3. Module-Based API Routes

    Rule: Each module must define its routes in a separate routes/api.php file within the module folder, following RESTful standards.
    AI Task: Ensure that routes are generated and grouped by module, following the REST API conventions for consistency and scalability.

4. Standardized API Responses using Resources

    Rule: Use Laravel API Resources to standardize JSON responses from all modules. Include metadata, pagination, and links as required.
    AI Task: Automatically generate API Resource classes in each module to ensure uniform and scalable responses across the API.

5. Form Request Validation

    Rule: Every incoming request must be validated using Form Requests to ensure proper data is being processed by the system.
    AI Task: Automatically create Form Request classes for each API route within its respective module, enforcing strong validation rules.

6. Versioned API for Backward Compatibility

    Rule: APIs must be versioned (e.g., /api/v1/) to allow backward compatibility and smooth transitions to future updates.
    AI Task: Ensure that API routes within each module are versioned, and automatically suggest version upgrades for breaking changes.

7. Role-Based Access Control (RBAC) in Modules

    Rule: Implement Role-Based Access Control (RBAC) within each module using policies and gates to handle permissions.
    AI Task: Automatically generate policies and gates for each module based on the required access levels, ensuring security and scalability in permission handling.

8. Database Migrations and Seeding in Modules

    Rule: Every module must define its own database migrations and seeding logic to maintain a modular and scalable database structure.
    AI Task: Automatically generate migration and seeding files for each module, ensuring compatibility with Laravel's migration system.

9. Caching for Improved Performance

    Rule: Frequently accessed data should be cached using Laravel Cache (Redis, Memcached, etc.) to improve response times and scalability.
    AI Task: Automatically detect which data can be cached, and generate caching mechanisms for data-heavy modules.

11. Error Handling and Logging in Modules

    Rule: Each module should handle errors gracefully and log them to ensure issues can be tracked and resolved efficiently.
    AI Task: Ensure each module has its own error handling logic and logs errors to a central logging system (e.g., using Laravel's logging facilities).

12. Dependency Injection for Maintainability

    Rule: Use dependency injection for services and repositories in all controllers and other classes to improve code maintainability.
    AI Task: Automatically inject dependencies in the constructor of controllers and services within each module, following Laravelâ€™s service container rules

13. Authentication using Laravel Sanctum

14. Module Documentation

    Rule: Each module must include a README file with a description of the module, its purpose, and how to use it.
